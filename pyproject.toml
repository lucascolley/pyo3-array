[build-system]
requires = ["maturin>=0.15,<2"]
build-backend = "maturin"


[project]
name = "pyo3-array"
version = "0.1.0"
authors = [
    { name = "Lucas Colley", email = "lucas.colley8@gmail.com" },
]
description = "An experimental Python API for rust-ndarray, following the Python array API standard."
readme = "README.md"
license.file = "LICENSE"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 1 - Planning",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
]
dependencies = []

[project.optional-dependencies]
test = [
    "pytest >=6",
    "pytest-cov >=3",
]
dev = [
    "pytest >=6",
    "pytest-cov >=3",
]
docs = [
    "sphinx>=7.0",
    "myst_parser>=0.13",
    "sphinx_copybutton",
    "sphinx_autodoc_typehints",
    "furo>=2023.08.17",
]

[project.urls]
Homepage = "https://github.com/lucascolley/pyo3-array"
"Bug Tracker" = "https://github.com/lucascolley/pyo3-array/issues"
Discussions = "https://github.com/lucascolley/pyo3-array/discussions"
Changelog = "https://github.com/lucascolley/pyo3-array/releases"


[tool.maturin]
module-name = "pyo3_array._core"
python-packages = ["pyo3_array"]
python-source = "src"
sdist-generator = "git"          # default is cargo


[tool.cibuildwheel]
test-command = "pytest {project}/tests"
test-extras = ["test"]
test-skip = ["*universal2:arm64"]


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
    "error",
]
log_cli_level = "INFO"
testpaths = [
    "tests",
]


[tool.coverage]
run.source = ["pyo3_array"]
report.exclude_also = [
    '\.\.\.',
    'if typing.TYPE_CHECKING:',
]

[tool.mypy]
files = ["src", "tests"]
python_version = "3.8"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "pyo3_array.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.ruff]
src = ["src"]

[tool.ruff.lint]
extend-select = [
    "B",   # flake8-bugbear
    "I",   # isort
    "ARG", # flake8-unused-arguments
    "C4",  # flake8-comprehensions
    "EM",  # flake8-errmsg
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "RET", # flake8-return
    "RUF", # Ruff-specific
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "EXE", # flake8-executable
    "NPY", # NumPy specific rules
    "PD",  # pandas-vet
]
ignore = [
    "PLR09",   # Too many <...>
    "PLR2004", # Magic value used in comparison
    "ISC001",  # Conflicts with formatter
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["pyo3_array._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]


[tool.pylint]
py-version = "3.8"
ignore-paths = [".*/_version.py"]
extension-pkg-allow-list = ["pyo3_array._core"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
    "design",
    "fixme",
    "line-too-long",
    "missing-module-docstring",
    "missing-function-docstring",
    "wrong-import-position",
]
